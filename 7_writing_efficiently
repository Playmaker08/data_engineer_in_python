// Non-Pythonic and Pythonic ways of looping over a list
# Print the list created using the Non-Pythonic approach
i = 0
new_list= []
while i < len(names):
    if len(names[i]) >= 6:
        new_list.append(names[i])
    i += 1
print(new_list)

# Print the list created by looping over the contents of names
better_list = []
for name in names:
    if len(name) >= 6:
        better_list.append(name)
print(better_list)

# Print the list created by using list comprehension
best_list = [name for name in names if len(name) >= 6]
print(best_list)

// Built-in practice: range()
# Create a range object that goes from 0 to 5
nums = range(6)
print(type(nums))

# Convert nums to a list
nums_list = list(nums)
print(nums_list)

# Create a new list of odd numbers from 1 to 11 by unpacking a range object
nums_list2 = [*range(1,12,2)]
print(nums_list2)

// Built-in practice: enumerate()
# Rewrite the for loop to use enumerate
indexed_names = []
for i,name in enumerate(names):
    index_name = (i,name)
    indexed_names.append(index_name) 
print(indexed_names)

# Rewrite the above for loop using list comprehension
indexed_names_comp = [(i,name) for i,name in enumerate(names)]
print(indexed_names_comp)

# Unpack an enumerate object with a starting index of one
indexed_names_unpack = [*enumerate(names, 1)]
print(indexed_names_unpack)
==> Output: <script.py> output:
    [(0, 'Jerry'), (1, 'Kramer'), (2, 'Elaine'), (3, 'George'), (4, 'Newman')]
    [(0, 'Jerry'), (1, 'Kramer'), (2, 'Elaine'), (3, 'George'), (4, 'Newman')]
    [(1, 'Jerry'), (2, 'Kramer'), (3, 'Elaine'), (4, 'George'), (5, 'Newman')]

// Built-in practice: map()
# Use map to apply str.upper to each element in names
names_map  = map(str.upper, names)

# Print the type of the names_map
print(type(names_map))

# Unpack names_map into a list
names_uppercase = [*names_map]

# Print the list created above
print(names_uppercase)
=> Output: <script.py> output:
    <class 'map'>
    ['JERRY', 'KRAMER', 'ELAINE', 'GEORGE', 'NEWMAN']

// Practice with NumPy arrays
[[ 1  2  3  4  5]
 [ 6  7  8  9 10]]

# Print second row of nums
print(nums[1,:])

# Print all elements of nums that are greater than six
print(nums[nums > 6])

# Double every element of nums
nums_dbl = nums * 2
print(nums_dbl)

# Replace the third column of nums
nums[:,2] = nums[:,2] + 1
print(nums)
=> Output: <script.py> output:
    [ 6  7  8  9 10]
    [ 7  8  9 10]
    [[ 2  4  6  8 10]
     [12 14 16 18 20]]
    [[ 1  2  4  4  5]
     [ 6  7  9  9 10]]

// Bringing it all together: Festivus!
# Create a list of arrival times
arrival_times = [*range(10,60,10)]

# Convert arrival_times to an array and update the times
arrival_times_np = np.array(arrival_times)
new_times = arrival_times_np - 3

# Use list comprehension and enumerate to pair guests to new times
guest_arrivals = [(names[i],time) for i,time in enumerate(new_times)]

# Map the welcome_guest function to each (guest,time) pair
welcome_map = map(welcome_guest, guest_arrivals)

guest_welcomes = [*welcome_map]
print(*guest_welcomes, sep='\n')
=> Output: <script.py> output:
    Welcome to Festivus Jerry... You're 7 min late.
    Welcome to Festivus Kramer... You're 17 min late.
    Welcome to Festivus Elaine... You're 27 min late.
    Welcome to Festivus George... You're 37 min late.
    Welcome to Festivus Newman... You're 47 min late.

(Runtime) Time our code to: pick optimal coding approach (fastest codes means most efficient)
Calculate runtime: %timeit (magic command)
Output: Time Mean & SD (including multiple loops and runs generated)
Specifying number of runs/loops: -r2 (two runs) or -n10 (ten loops)
For multiple magic code, use %%timeit
Save into variable: use %timeit -o
(%lprun) Code profiling: Line-by-line analysis of detailed stats on frequency and duration of function calls
Profiling a function allows you to dig deeper into the function's source code and potentially spot bottlenecks. When you see certain lines of code taking up the majority of the function's runtime, it is an indication that you may want to deploy a different, more efficient technique.
(%mprun) Code profiling for memory usage: Line-by-line analysis of memory consumption

// Using %timeit
# Using list comprehension
%timeit [num for num in range(51)]

# Using unpacking of range
%timeit [*range(51)] 
=> Output: (unpacking seems slightly faster)
2.58 us +- 117 ns per loop (mean +- std. dev. of 7 runs, 100000 loops each)
1.02 us +- 22.1 ns per loop (mean +- std. dev. of 7 runs, 1000000 loops each)

// Bringing it all together: Star Wars profiling
# Use get_publisher_heroes() to gather Star Wars heroes
star_wars_heroes = get_publisher_heroes(heroes, publishers, 'George Lucas')

print(star_wars_heroes)
print(type(star_wars_heroes))

# Use get_publisher_heroes_np() to gather Star Wars heroes
star_wars_heroes_np = get_publisher_heroes_np(heroes, publishers, 'George Lucas')

print(star_wars_heroes_np)
print(type(star_wars_heroes_np))
=> Output: <script.py> output:
    ['Darth Vader', 'Han Solo', 'Luke Skywalker', 'Yoda']
    <class 'list'>
    ['Darth Vader' 'Han Solo' 'Luke Skywalker' 'Yoda']
    <class 'numpy.ndarray'>
While get_publisher_heroes_np() has faster runtime, both has the same memory consumption => get_publisher_heroes_np() is preferred

Itertools module
- Infinite iterators: count, cycle, repeat
- Finite iterators: accumulate, chain, zip_longest, etc
- Combination generators: product, permutations, combinations

// Combining Pokémon names and types
# Combine names and primary_types
names_type1 = [*zip(names, primary_types)]
print(*names_type1[:5], sep='\n')

# Combine all three lists together
names_types = [*zip(names, primary_types, secondary_types)]
print(*names_types[:5], sep='\n')

# Combine five items from names and three items from primary_types
differing_lengths = [*zip(names[:5], primary_types[:3])]
print(*differing_lengths, sep='\n')
=> Output: <script.py> output:
    ('Abomasnow', 'Grass', 'Ice')
    ('Abra', 'Psychic', nan)
    ('Absol', 'Dark', nan)
    ('Accelgor', 'Bug', nan)
    ('Aerodactyl', 'Rock', 'Flying')

The first five items in the names list are: ['Abomasnow', 'Abra', 'Absol', 'Accelgor', 'Aerodactyl']

The first five items in the primary_types list are: ['Grass', 'Psychic', 'Dark', 'Bug', 'Rock']

The first five items in the secondary_types list are: ['Ice', nan, nan, nan, 'Flying']

<script.py> output:
    ('Abomasnow', 'Grass')
    ('Abra', 'Psychic')
    ('Absol', 'Dark')

// Counting Pokémon from a sample
# Collect the count of primary types
type_count = Counter(primary_types)
print(type_count, '\n')

# Collect the count of generations
gen_count = Counter(generations)
print(gen_count, '\n')

# Use list comprehension to get each Pokémon's starting letter
starting_letters = [name[0] for name in names]

# Collect the count of Pokémon for each starting_letter
starting_letters_count = Counter(starting_letters)
print(starting_letters_count)
=> Output: <script.py> output:
    Counter({'Water': 66, 'Normal': 64, 'Bug': 51, 'Grass': 47, 'Psychic': 31, 'Rock': 29, 'Fire': 27, 'Electric': 25, 'Ground': 23, 'Fighting': 23, 'Poison': 22, 'Steel': 18, 'Ice': 16, 'Fairy': 16, 'Dragon': 16, 'Ghost': 13, 'Dark': 13}) 
    
    Counter({5: 122, 3: 103, 1: 99, 4: 78, 2: 51, 6: 47}) 
    
    Counter({'S': 83, 'C': 46, 'D': 33, 'M': 32, 'L': 29, 'G': 29, 'B': 28, 'P': 23, 'A': 22, 'K': 20, 'E': 19, 'W': 19, 'T': 19, 'F': 18, 'H': 15, 'R': 14, 'N': 13, 'V': 10, 'Z': 8, 'J': 7, 'I': 4, 'O': 3, 'Y': 3, 'U': 2, 'X': 1})

// Combinations of Pokémon
# Import combinations from itertools
from itertools import combinations

# Create a combination object with pairs of Pokémon
combos_obj = combinations(pokemon, 2)
print(type(combos_obj), '\n')

# Convert combos_obj to a list by unpacking
combos_2 = [*combos_obj]
print(combos_2, '\n')

# Collect all possible combinations of 4 Pokémon directly into a list
combos_4 = [*combinations(pokemon, 4)]
print(combos_4)
=> Output: ['Geodude', 'Cubone', 'Lickitung', 'Persian', 'Diglett']

<script.py> output:
    <class 'itertools.combinations'> 
    
    [('Geodude', 'Cubone'), ('Geodude', 'Lickitung'), ('Geodude', 'Persian'), ('Geodude', 'Diglett'), ('Cubone', 'Lickitung'), ('Cubone', 'Persian'), ('Cubone', 'Diglett'), ('Lickitung', 'Persian'), ('Lickitung', 'Diglett'), ('Persian', 'Diglett')] 
    
    [('Geodude', 'Cubone', 'Lickitung', 'Persian'), ('Geodude', 'Cubone', 'Lickitung', 'Diglett'), ('Geodude', 'Cubone', 'Persian', 'Diglett'), ('Geodude', 'Lickitung', 'Persian', 'Diglett'), ('Cubone', 'Lickitung', 'Persian', 'Diglett')]

// Comparing Pokédexes
# Convert both lists to sets
ash_set = set(ash_pokedex)
misty_set = set(misty_pokedex)

# Find the Pokémon that exist in both sets
both = ash_set.intersection(misty_set)
print(both)

# Find the Pokémon that Ash has, and Misty does not have
ash_only = ash_set.difference(misty_set)
print(ash_only)

# Find the Pokémon that are in only one set (not both)
unique_to_set = ash_set.symmetric_difference(misty_set)
print(unique_to_set)

// Searching for Pokémon
# Convert Brock's Pokédex to a set
brock_pokedex_set = set(brock_pokedex)
print(brock_pokedex_set)

# Check if Psyduck is in Ash's list and Brock's set
print('Psyduck' in ash_pokedex)
print('Psyduck' in brock_pokedex_set)

# Check if Machop is in Ash's list and Brock's set
print('Machop' in ash_pokedex)
print('Machop' in brock_pokedex_set)

// Gathering unique Pokémon
# Use find_unique_items() to collect unique Pokémon names
uniq_names_func = find_unique_items(names)
print(len(uniq_names_func))

# Convert the names list to a set to collect unique Pokémon names
uniq_names_set = set(names)
print(len(uniq_names_set))

# Check that both unique collections are equivalent
print(sorted(uniq_names_func) == sorted(uniq_names_set))

# Use the best approach to collect unique primary types and generations
uniq_types = set(primary_types) 
uniq_gens = set(generations)
print(uniq_types, uniq_gens, sep='\n') 

Eliminating loops: "flat is better than nested"
Anything can be done once should perform outside the loop

// Gathering Pokémon without a loop
# Collect Pokémon that belong to generation 1 or generation 2
gen1_gen2_pokemon = [name for name,gen in zip(poke_names, poke_gens) if gen < 3]

# Create a map object that stores the name lengths
name_lengths_map = map(len, gen1_gen2_pokemon)

# Combine gen1_gen2_pokemon and name_lengths_map into a list
gen1_gen2_name_lengths = [*zip(gen1_gen2_pokemon, name_lengths_map)]

print(gen1_gen2_name_lengths_loop[:5])
print(gen1_gen2_name_lengths[:5])
=> Output: <script.py> output:
    [('Abra', 4), ('Aerodactyl', 10), ('Aipom', 5), ('Alakazam', 8), ('Ampharos', 8)]
    [('Abra', 4), ('Aerodactyl', 10), ('Aipom', 5), ('Alakazam', 8), ('Ampharos', 8)]

// Pokémon totals and averages without a loop
# Create a total stats array
total_stats_np = stats.sum(axis=1)

# Create an average stats array
avg_stats_np = stats.mean(axis=1)

# Combine names, total_stats_np, and avg_stats_np into a list
poke_list_np = [*zip(names, total_stats_np, avg_stats_np)]

print(poke_list_np == poke_list, '\n')
print(poke_list_np[:3])
print(poke_list[:3], '\n')
top_3 = sorted(poke_list_np, key=lambda x: x[1], reverse=True)[:3]
print('3 strongest Pokémon:\n{}'.format(top_3))
=> Output: <script.py> output:
    True 
    
    [('Abomasnow', 494, 82.33333333333333), ('Abra', 310, 51.666666666666664), ('Absol', 465, 77.5)]
    [('Abomasnow', 494, 82.33333333333333), ('Abra', 310, 51.666666666666664), ('Absol', 465, 77.5)] 
    
    3 strongest Pokémon:
    [('GroudonPrimal Groudon', 770, 128.33333333333334), ('KyogrePrimal Kyogre', 770, 128.33333333333334), ('Arceus', 720, 120.0)]

// One-time calculation loop
# Import Counter
from collections import Counter

# Collect the count of each generation
gen_counts = Counter(generations)

# Improve for loop by moving one calculation above the loop
total_count = len(generations)

for gen,count in gen_counts.items():
    gen_percent = round(count / total_count * 100, 2)
    print('generation {}: count = {:3} percentage = {}'
          .format(gen, count, gen_percent))
=> Output: <script.py> output:
    generation 4: count = 112 percentage = 15.56
    generation 1: count = 151 percentage = 20.97
    generation 3: count = 136 percentage = 18.89
    generation 5: count = 154 percentage = 21.39
    generation 2: count =  99 percentage = 13.75
    generation 6: count =  68 percentage = 9.44

// Holistic conversion loop (interconnection)
# Collect all possible pairs using combinations()
possible_pairs = [*combinations(pokemon_types, 2)]

# Create an empty list called enumerated_tuples
enumerated_tuples = []

for i,pair in enumerate(possible_pairs, 1):
    enumerated_pair_tuple = (i,) + pair
    enumerated_tuples.append(enumerated_pair_tuple)

# Convert all tuples in enumerated_tuples to a list
enumerated_pairs = [*map(list, enumerated_tuples)]
print(enumerated_pairs)

// Bringing it all together: Pokémon z-scores
# Calculate the total HP avg and total HP standard deviation
hp_avg = hps.mean()
hp_std = hps.std()

# Use NumPy to eliminate the previous for loop
z_scores = (hps - hp_avg)/hp_std

# Combine names, hps, and z_scores
poke_zscores2 = [*zip(names, hps, z_scores)]
print(*poke_zscores2[:3], sep='\n')

# Use list comprehension with the same logic as the highest_hp_pokemon code block
highest_hp_pokemon2 = [(name, hp, zscore) for name,hp,zscore in poke_zscores2 if zscore > 2]
print(*highest_hp_pokemon2, sep='\n')
=> Output: <script.py> output:
    ('Abomasnow', 80.0, 0.46797638117739043)
    ('Abra', 60.0, -0.3271693284337512)
    ('Absol', 131.0, 2.4955979406858013)
    ('Absol', 131.0, 2.4955979406858013)
    ('Bonsly', 127.0, 2.3365687987635733)
    ('Caterpie', 122.0, 2.137782371360788)
    ('Cofagrigus', 133.0, 2.575112511646916)
    ('Cresselia', 126.0, 2.296811513283016)
    ('Dewgong', 122.0, 2.137782371360788)
    ('Druddigon', 126.0, 2.296811513283016)
    ('Froakie', 123.0, 2.1775396568413448)
    ('Kadabra', 135.0, 2.65462708260803)
    ('Klang', 123.0, 2.1775396568413448)
    ('Kricketune', 122.0, 2.137782371360788)
    ('Lumineon', 129.0, 2.4160833697246873)
    ('Magnemite', 137.0, 2.734141653569144)
    ('Nidorina', 119.0, 2.0185105149191167)
    ('Onix', 126.0, 2.296811513283016)
    ('Prinplup', 124.0, 2.217296942321902)
    ('Skuntank', 128.0, 2.3763260842441305)
    ('Swellow', 125.0, 2.2570542278024592)

// Iterating with .iterrows()
# Print the row and type of each row
for row_tuple in pit_df.iterrows():
    print(row_tuple)
    print(type(row_tuple))
=> Output: 
  Team League  Year   RS   RA   W    G  Playoffs
0  PIT     NL  2012  651  674  79  162         0
1  PIT     NL  2011  610  712  72  162         0
2  PIT     NL  2010  587  866  57  162         0
3  PIT     NL  2009  636  768  62  161         0
4  PIT     NL  2008  735  884  67  162         0

<script.py> output:
    (0, Team         PIT
    League        NL
    Year        2012
    RS           651
    RA           674
    W             79
    G            162
    Playoffs       0
    Name: 0, dtype: object)
    <class 'tuple'>
    (1, Team         PIT
    League        NL
    Year        2011
    RS           610
    RA           712
    W             72
    G            162
    Playoffs       0
    Name: 1, dtype: object)
    <class 'tuple'>
    (2, Team         PIT
    League        NL
    Year        2010
    RS           587
    RA           866
    W             57
    G            162
    Playoffs       0
    Name: 2, dtype: object)
    <class 'tuple'>
    (3, Team         PIT
    League        NL
    Year        2009
    RS           636
    RA           768
    W             62
    G            161
    Playoffs       0
    Name: 3, dtype: object)
    <class 'tuple'>
    (4, Team         PIT
    League        NL
    Year        2008
    RS           735
    RA           884
    W             67
    G            162
    Playoffs       0
    Name: 4, dtype: object)
    <class 'tuple'>

// Run differentials with .iterrows()
# Create an empty list to store run differentials
run_diffs = []

# Write a for loop and collect runs allowed and runs scored for each row
for i,row in giants_df.iterrows():
    runs_scored = row['RS']
    runs_allowed = row['RA']

    def calc_run_diff(runs_scored, runs_allowed):
    run_diff = runs_scored - runs_allowed
    return run_diff

    # Use the provided function to calculate run_diff for each row
    run_diff = calc_run_diff(runs_scored, runs_allowed)
    
    # Append each run differential to the output list
    run_diffs.append(run_diff)

giants_df['RD'] = run_diffs
print(giants_df)
=> Output:
  Team League  Year   RS   RA   W    G  Playoffs
0  SFG     NL  2012  718  649  94  162         1
1  SFG     NL  2011  570  578  86  162         0
2  SFG     NL  2010  697  583  92  162         1
3  SFG     NL  2009  657  611  88  162         0
4  SFG     NL  2008  640  759  72  162         0

<script.py> output:
      Team League  Year   RS   RA   W    G  Playoffs   RD
    0  SFG     NL  2012  718  649  94  162         1   69
    1  SFG     NL  2011  570  578  86  162         0   -8
    2  SFG     NL  2010  697  583  92  162         1  114
    3  SFG     NL  2009  657  611  88  162         0   46
    4  SFG     NL  2008  640  759  72  162         0 -119

// Iterating with .itertuples()
# Loop over the DataFrame and print each row's Index, Year and Wins (W)
for row in rangers_df.itertuples():
  i = row.Index
  year = row.Year
  wins = row.W
  
  # Check if rangers made Playoffs (1 means yes; 0 means no)
  if row.Playoffs == 1:
    print(i, year, wins)

// Run differentials with .itertuples()
run_diffs = []

# Loop over the DataFrame and calculate each row's run differential
for row in yankees_df.itertuples():
    
    runs_scored = row.RS
    runs_allowed = row.RA

    run_diff = calc_run_diff(runs_scored, runs_allowed)
    
    run_diffs.append(run_diff)

# Append new column
yankees_df['RD'] = run_diffs
print(yankees_df)
=> Output: <script.py> output:
       Team League  Year   RS   RA    W    G  Playoffs   RD
    0   NYY     AL  2012  804  668   95  162         1  136
    1   NYY     AL  2011  867  657   97  162         1  210
    2   NYY     AL  2010  859  693   95  162         1  166
    3   NYY     AL  2009  915  753  103  162         1  162
    4   NYY     AL  2008  789  727   89  162         0   62
    5   NYY     AL  2007  968  777   94  162         1  191
    6   NYY     AL  2006  930  767   97  162         1  163
    7   NYY     AL  2005  886  789   95  162         1   97
    8   NYY     AL  2004  897  808  101  162         1   89
    9   NYY     AL  2003  877  716  101  163         1  161
    10  NYY     AL  2002  897  697  103  161         1  200

// Analyzing baseball stats with .apply()
# Gather sum of all columns
stat_totals = rays_df.apply(sum, axis=0)
print(stat_totals)

# Gather total runs scored in all games per year
total_runs_scored = rays_df[['RS', 'RA']].apply(sum, axis=1)
print(total_runs_scored)

# Convert numeric playoffs to text by applying text_playoffs()
textual_playoffs = rays_df.apply(lambda row: text_playoffs(row['Playoffs']), axis=1)
print(textual_playoffs)
=> Output: 
       RS   RA   W  Playoffs
2012  697  577  90         0
2011  707  614  91         1
2010  802  649  96         1
2009  803  754  84         0
2008  774  671  97         1

<script.py> output:
    RS          3783
    RA          3265
    W            458
    Playoffs       3
    dtype: int64

<script.py> output:
    2012    1274
    2011    1321
    2010    1451
    2009    1557
    2008    1445
    dtype: int64

<script.py> output:
    2012     No
    2011    Yes
    2010    Yes
    2009     No
    2008    Yes
    dtype: object

// Settle a debate with .apply()
# Display the first five rows of the DataFrame
print(dbacks_df.head())

# Create a win percentage Series 
win_percs = dbacks_df.apply(lambda row: calc_win_perc(row['W'], row['G']), axis=1)
print(win_percs, '\n')

# Append a new column to dbacks_df
dbacks_df['WP'] = win_percs
print(dbacks_df, '\n')

# Display dbacks_df where WP is greater than 0.50
print(dbacks_df[dbacks_df['WP'] >= 0.50])

// Replacing .iloc with underlying arrays

def calc_win_perc(wins, games_played):
    win_perc = wins / games_played
    return np.round(win_perc,2)
win_percs_list = []
for i in range(len(baseball_df)):
    row = baseball_df.iloc[i]
    wins = row['W']
    games_played = row['G']
    win_perc = calc_win_perc(wins, games_played)
    win_percs_list.append(win_perc)
baseball_df['WP'] = win_percs_list

# Use the W array and G array to calculate win percentages
win_percs_np = calc_win_perc(baseball_df['W'].values, baseball_df['G'].values)

# Append a new column to baseball_df that stores all win percentages
baseball_df['WP'] = win_percs_np

print(baseball_df.head())
=> Output: <script.py> output:
      Team League  Year   RS   RA   W    G  Playoffs    WP
    0  ARI     NL  2012  734  688  81  162         0  0.50
    1  ATL     NL  2012  700  600  94  162         1  0.58
    2  BAL     AL  2012  712  705  93  162         1  0.57
    3  BOS     AL  2012  734  806  69  162         0  0.43
    4  CHC     NL  2012  613  759  61  162         0  0.38

// Bringing it all together: Predict win percentage

def predict_win_perc(RS, RA):
    prediction = RS ** 2 / (RS ** 2 + RA ** 2)
    return np.round(prediction, 2)

OrderedDict([('Team', 'Abbreviated team name'),
             ('League', 'Specifies National League or American League'),
             ('Year', "Each season's year"),
             ('RS', 'Runs scored in a season'),
             ('RA', 'Runs allowed in a season'),
             ('W', 'Wins in a season'),
             ('G', 'Games played in a season'),
             ('Playoffs', '`1` if a team made the playoffs; `0` if they did not'),
             ('WP', 'True win percentage for a season')])

Code:
win_perc_preds_loop = []
# Use a loop and .itertuples() to collect each row's predicted win percentage
for row in baseball_df.itertuples():
    runs_scored = row.RS
    runs_allowed = row.RA
    win_perc_pred = predict_win_perc(runs_scored, runs_allowed)
    win_perc_preds_loop.append(win_perc_pred)

# Apply predict_win_perc to each row of the DataFrame
win_perc_preds_apply = baseball_df.apply(lambda row: predict_win_perc(row['RS'], row['RA']), axis=1)

# Calculate the win percentage predictions using NumPy arrays
win_perc_preds_np = predict_win_perc(baseball_df['RS'].values, baseball_df['RA'].values)
baseball_df['WP_preds'] = win_perc_preds_np
print(baseball_df.head())
=> Output: <script.py> output:
      Team League  Year   RS   RA   W    G  Playoffs    WP  WP_preds
    0  ARI     NL  2012  734  688  81  162         0  0.50      0.53
    1  ATL     NL  2012  700  600  94  162         1  0.58      0.58
    2  BAL     AL  2012  712  705  93  162         1  0.57      0.50
    3  BOS     AL  2012  734  806  69  162         0  0.43      0.45
    4  CHC     NL  2012  613  759  61  162         0  0.38      0.39
